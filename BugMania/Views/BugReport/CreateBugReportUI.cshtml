@model BugMania.Models.CreateBugReportViewModel

@{
    ViewBag.Title = "New Bug Report";
    ViewBag.Placeholder = "**Environment:**\n\n\n" +
                        "**Steps To Reproduce:**\n" +
                        "1.\n\n" +
                        "**Expected Result:**\n\n\n" +
                        "**Actual Result:**";
}

<a href="@Request.UrlReferrer.ToString()" class="glyphicon glyphicon-arrow-left btn-link-text font-size-25" title="Back"></a>

<div class="m-b-10p">
    <div class="col-md-2"></div>
    <div class="col-md-10 general-header">New Bug Report</div>
</div>



@using (Html.BeginForm("CreateReport", "CreateBugReport", FormMethod.Post, new { @id = "createBugReportForm" }))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.Title, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-8">
                @Html.EditorFor(model => model.Title, new { htmlAttributes = new { @id = "createBrTitle", @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
            </div>
            <div class="col-md-2"></div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-8">
                @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @placeholder = ViewBag.Placeholder, @rows = "15", @id = "createBrDescription", @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
            </div>
            <div class="col-md-2"></div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ProductId, "Product", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-8">
                @Html.DropDownList("ProductId", null, htmlAttributes: new { @id = "createBrProduct", @class = "form-control" })
                @Html.ValidationMessageFor(model => model.ProductId, "", new { @class = "text-danger" })
            </div>
            <div class="col-md-2"></div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.SeverityId, "Severity", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-8">
                @Html.DropDownList("SeverityId", null, htmlAttributes: new { @id = "createBrSeverity", @class = "form-control" })
                @Html.ValidationMessageFor(model => model.SeverityId, "", new { @class = "text-danger" })
            </div>
            <div class="col-md-2"></div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.PriorityId, "Priority", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-8">
                @Html.DropDownList("PriorityId", null, htmlAttributes: new { @id = "createBrPriority", @class = "form-control" })
                @Html.ValidationMessageFor(model => model.PriorityId, "", new { @class = "text-danger" })
            </div>
            <div class="col-md-2"></div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Tags, "Tags", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-5">
                @Html.DropDownList("Tags", null, htmlAttributes: new { @id = "tagDropDownList", @class = "form-control" })
            </div>
            <div class="col-md-3">
                <span id="btnShowTagModal" class="btn btn-success glyphicon btn-link-text color-white pull-left">+</span>
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-2"></div>
            <div id="tagList" class="col-md-10 min-height-40"></div>
        </div>

        <div>
            <div class="col-md-2"></div>
            <div class="col-md-8 div-zero-margin p-l-5">
                @Html.ActionLink("Cancel", "ViewAllReports", "ViewAllBugReport", null, new { @class = "btn btn-link-text color-white btn-danger btn-std" })
                <button type="button" id="btnCreateBugReport" class="btn btn-info btn-std pull-right">Create</button>
            </div>
            <div class="col-md-2"></div>
        </div>
    </div>
}



<div class="modal fade" tabindex="-1" id="createTagModal"
     data-keyboard="false" data-backdrop="static">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">
                    ×
                </button>
                <h4 class="modal-title">Create Tag</h4>
            </div>
            <div class="modal-body">
                @Html.Partial("/Views/Tag/_CreateTagUI.cshtml")
                <div class="modal-footer">
                    <button type="button" id="btnHideTagModal" class="btn btn-danger btn-std pull-left">Close</button>
                    <button type="button" id="btnCreateTag" class="btn btn-info btn-std">Create</button>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")

    <script type="text/javascript">
        $(document).ready(function () {
            $("#btnShowTagModal").click(function () {
                $("#createTagModal").modal('show');
            });

            $("#btnHideTagModal").click(function () {
                $("#createTagModal").modal('hide');
            });

            // Submit Create Bug Report Form
            $("#btnCreateBugReport").click(function () {
                if ($("#createBrTitle").val().trim() == "" || $("#createBrDescription").val().trim() == "") {
                    return;
                }
                var data = {
                    Title: $("#createBrTitle").val(),
                    Description: $("#createBrDescription").val(),
                    ProductId: $("#createBrProduct").val(),
                    SeverityId: $("#createBrSeverity").val(),
                    PriorityId: $("#createBrPriority").val(),
                    Tags: getCollectionOfTags(),
                    __RequestVerificationToken: $('input[name=__RequestVerificationToken]').val()
                };

                $.ajax({
                    type: "post",
                    url: "/CreateBugReport/CreateReport",
                    data: data,
                    success: function (response) {
                        window.location.href = '/';
                    },
                    error: function (request, status, error) {
                        alert(request.responseText);
                    }
                })

                e.preventDefault();
            });

            // Submit Create Tags Form
            $('#btnCreateTag').click(function () {
                var data = {
                    name: $("#tagName").val(),
                    description: $("#tagDescription").val(),
                    __RequestVerificationToken: $('input[name=__RequestVerificationToken]').val()
                };

                $.ajax({
                    type: "post",
                    url: "/CreateTag/Create",
                    data: data,
                    success: function (response) {
                        $('#createTagModal').modal('hide');
                        
                        var tagList = $("#tagDropDownList");
                        $.ajax({
                            type: "post",
                            url: '@Url.Action("GetAllTags","CreateBugReport")',
                            data: ' ',
                            dataType: "json",
                            contentType: "application/json; charset=utf-8",
                            success: function (response) {
                                tagList.html("");

                                for (var i = 0; i < response.length; i++) {
                                    tagList.append($('<option></option>').val(response[i].Value).html(response[i].Text));
                                }
                            },
                            error: function (request, status, error) {
                                alert(request.responseText);
                            }
                        })
                    },
                    error: function (request, status, error) {
                        alert(request.responseText);
                    }
                })
            });


            // Show chosen tags
            $(document).on('change', '#tagDropDownList', function () {
                addTag($(this).val(), $("#tagDropDownList option:selected").text());
            });

            function addTag(name, text) {
                var isNew = true;
                var parent = document.getElementById("tagList");

                if (parent == null || name == "") return;

                for (let child of Array.from(parent.children)) {
                    if (child.id == name) {
                        isNew = false;
                    }
                }

                if (isNew) {
                    var span = document.createElement("span");
                    span.id = name;
                    span.className = "card-info card-tag cursor-pointer";
                    span.innerHTML = text;
                    span.addEventListener("click", (event) => {
                        delTag(event.target.id)
                    });
                    parent.appendChild(span);
                }
            }

            function delTag(id) {
                var child = document.getElementById(id);
                var parent = document.getElementById("tagList");
                if (child != null && parent != null) {
                    parent.removeChild(child);
                }
            }

            function getCollectionOfTags() {
                var arr = [];
                var parent = document.getElementById("tagList");
                for (let child of Array.from(parent.children)) {
                    arr.push({
                        Id: child.id,
                        Name: child.innerHTML,
                        Description: ""
                    });
                }
                if (arr.length == 0) {
                    var selectList = document.getElementById("tagDropDownList");
                    arr.push({
                        Id: selectList.value,
                        // Only the value can be fetched
                        Name: "temp",
                        Description: ""
                    });
                }

                return arr;
            }
        });
    </script>
}